<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 启动包扫描功能，以便注册带有@Controller注解的类成为spring的bean
	    此处针对控制器部分进行扫描
	    注意：不能重复扫描service dao层，否则事务等配置失效
	-->
	<context:component-scan base-package="demo.controller"/>

	<!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射 -->
	<mvc:annotation-driven />

	<!-- 对静态资源文件的访问 不支持访问WEB-INF目录 -->
	<mvc:default-servlet-handler />

	<!-- 协商资源表述 -->
	<bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<!-- 注解扫描方式，进行xml与对象之间的转换 -->
		<property name="packagesToScan" value="demo.bean" />
	</bean>

	<bean id="employees"
		class="org.springframework.web.servlet.view.xml.MarshallingView">
		<constructor-arg ref="jaxbMarshaller" />
	</bean>

	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">

		<!-- 这里是否忽略掉accept header，默认就是false -->
		<property name="ignoreAcceptHeader" value="false" />

		<!-- 如果所有的mediaType都没匹配上，就会使用defaultContentType -->
		<property name="defaultContentType" value="text/html" />
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
				<entry key="html" value="text/html" />
			</map>
		</property>

		<!-- 默认使用MappingJacksonJsonView生成jsonview -->
		<property name="defaultViews">
			<list>
				<!-- json格式返回view -->
				<bean
					class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
					<property name="extractValueFromSingleKeyModel" value="true" />
					<!--extractValueFromSingleKeyModel值为true,返回的json格式： {"product":{"pid":"00001","pname":"23123"}} 
						extractValueFromSingleKeyModel值为false,返回的json格式：{"pid":"00001","pname":"23123"} -->
				</bean>
				<!-- xml格式返回view -->
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<property name="marshaller">
						<bean class="org.springframework.oxm.xstream.XStreamMarshaller" />
					</property>
				</bean>
			</list>
		</property>

		<!-- 申明ContentNegotiatingViewResolver委托的视图解析器列表 -->
		<property name="viewResolvers">
			<list>
				<!-- This ViewResolver implements the Ordered interface to allow for 
					flexible participation in ViewResolver chaining. For example, some special 
					views could be defined via this ViewResolver (giving it 0 as "order" value), 
					while all remaining views could be resolved by a UrlBasedViewResolver. 看起来 
					BeanNameViewResolver和UrlBasedViewResolver需要一起使用 -->
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
				<bean id="viewResolver"
					class="org.springframework.web.servlet.view.UrlBasedViewResolver">
					<!-- 返回的视图模型数据需要经过jstl来处理 -->
					<property name="viewClass"
						value="org.springframework.web.servlet.view.JstlView" />
					<property name="prefix" value="/WEB-INF/jsp/" />
					<property name="suffix" value=".jsp" />
				</bean>
			</list>
		</property>

	</bean>
</beans>
